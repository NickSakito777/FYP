# 校园虚实结合任务系统 - 任务结构与实现方案

# Cursor Rules - 项目规范指导方针

## 1. 项目结构规范

### 1.1 包命名与组织
- 主包名保持为`com.example.lbsdemo`
- 功能模块应放置在对应子包:
  - `activity`: UI页面相关类
  - `map`: 地图与定位服务
  - `task`: 任务生成与管理
  - `user`: 用户数据与偏好
  - `media`: 媒体处理（照片等）
  - `bluetooth`: 蓝牙通信
  - `chat`: 新增对话系统相关类
  - `llm`: 新增LLM交互服务类

### 1.2 新增类结构
```
com.example.lbsdemo
├── chat
│   ├── ChatActivity.java              # 对话界面
│   ├── ChatAdapter.java               # 消息列表适配器
│   ├── ChatMessage.java               # 消息数据模型
│   └── ChatHistoryDao.java            # 消息历史数据访问对象
└── llm
    ├── LLMService.java                # LLM API封装
    ├── LLMContextManager.java         # 上下文管理
    ├── PromptBuilder.java             # 提示词构建
    ├── TaskGenerator.java             # 任务生成逻辑
    └── StorylineManager.java          # 故事线管理
```

## 2. 代码规范

### 2.1 命名约定
- 类名: PascalCase (如`ChatActivity`, `LLMService`)
- 方法与变量: camelCase (如`getUserContext`, `taskData`)
- 常量: UPPER_SNAKE_CASE (如`MAX_CONTEXT_LENGTH`)
- 数据库表: snake_case (如`chat_history`)

### 2.2 注释要求
- 类头部: 简要说明类的功能与责任
- 方法: 描述入参出参和功能
- 复杂逻辑: 添加行内注释解释原理
- LLM相关代码: 详细注明提示词构建逻辑

### 2.3 异步处理
- 数据库操作必须在后台线程执行
- 网络请求必须使用异步方式
- UI更新必须在主线程执行

## 3. LLM集成规范

### 3.1 上下文管理
- 每次API调用前必须构建用户特定上下文
- 上下文必须包含:
  - 用户ID和角色身份
  - 当前任务状态摘要
  - 位置信息摘要
  - 相关对话历史
- 上下文长度超限时采用摘要替代

```java
// 标准上下文构建方法示例
public JSONObject buildContext(String userId) {
    JSONObject context = new JSONObject();
    
    // 1. 基本用户信息
    context.put("user_id", userId);
    context.put("character", getCurrentCharacter(userId));
    
    // 2. 任务状态摘要
    context.put("tasks", getTaskSummary(userId));
    
    // 3. 位置信息
    context.put("location", getLocationInfo(userId));
    
    // 4. 对话历史(最近10条)
    context.put("chat_history", getRecentMessages(userId, 10));
    
    return context;
}
```

### 3.2 提示词模板
- 使用统一的提示词构建方法
- 区分系统指令、提示词主体和用户输入
- 关键提示词模板:
  - 主线任务生成
  - 子任务分解
  - 每日任务生成
  - 对话回复

### 3.3 响应处理
- 实现错误重试机制(最多3次)
- 格式化响应解析为标准JSON
- 将任务相关信息存入数据库
- 非正常响应使用预设回退答案

## 4. 数据库模型扩展

### 4.1 新增对话历史表
```java
@Entity(tableName = "chat_history")
public class ChatMessage {
    @PrimaryKey(autoGenerate = true)
    public int id;
    
    @ColumnInfo(name = "user_id")
    public String userId;
    
    @ColumnInfo(name = "role") // "system", "user", "assistant"
    public String role;
    
    @ColumnInfo(name = "content")
    public String content;
    
    @ColumnInfo(name = "timestamp")
    public long timestamp;
    
    @ColumnInfo(name = "related_task_id")
    public Integer relatedTaskId; // 可为null
}
```

### 4.2 任务层级关系
```java
// 扩展TaskData类
@Entity(tableName = "daily_tasks")
public class TaskData {
    // 现有字段...
    
    @ColumnInfo(name = "task_type")
    public String taskType; // "main", "sub", "daily"
    
    @ColumnInfo(name = "parent_task_id")
    public Integer parentTaskId; // 父任务ID，可为null
    
    @ColumnInfo(name = "character_id")
    public String characterId; // 关联的虚拟角色
    
    @ColumnInfo(name = "storyline_context")
    public String storylineContext; // 任务的故事背景
}
```

## 5. 界面交互规范

### 5.1 消息类型
- 文本消息: 普通对话内容
- 任务卡片: 可接受任务的特殊消息
- 系统通知: 任务完成等状态更新

### 5.2 任务卡片设计
```xml
<CardView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp">
    
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        
        <TextView
            android:id="@+id/taskTitle"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:textStyle="bold"/>
            
        <TextView
            android:id="@+id/taskDescription"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"/>
            
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="8dp">
            
            <TextView
                android:id="@+id/taskLocation"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"/>
                
            <TextView
                android:id="@+id/taskDuration"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
        </LinearLayout>
        
        <Button
            android:id="@+id/btnAcceptTask"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="接受任务"/>
    </LinearLayout>
</CardView>
```

## 6. 功能实现指南

### 6.1 对话系统实现
- 创建RecyclerView显示消息列表
- 使用不同ViewHolder区分消息类型
- 实现消息发送和接收逻辑
- 集成LLM服务生成响应

### 6.2 任务生成流程
1. 根据用户偏好生成主线任务
2. 将主线任务分解为子任务
3. 根据用户当前情况生成每日任务
4. 任务完成后更新状态并推进故事

### 6.3 任务验证机制
- 地理围栏验证: 用户到达指定位置
- 时长验证: 在特定位置停留足够时间
- 拍照验证: 拍摄指定目标
- 蓝牙验证: 接收特定蓝牙信号

## 7. 测试与评估

### 7.1 测试场景
- 多用户切换: 验证上下文是否正确隔离
- 离线模式: 测试网络不可用时的降级体验
- 任务连续性: 确认任务进度正确保存和恢复

### 7.2 性能指标
- LLM响应时间应控制在3秒内
- 对话历史加载应不超过1秒
- 地理围栏触发延迟应小于2秒

## 8. 迭代优先级

1. 实现基本对话界面和LLM集成
2. 完成任务层级结构设计
3. 开发上下文管理机制
4. 实现任务卡片和交互
5. 优化故事生成和任务分解
6. 测试多用户场景

## 1. 系统架构概述

### 1.1 核心组件
- **对话系统**: 用户与虚拟角色的交互界面
- **LLM服务**: 驱动虚拟角色对话和任务生成
- **任务管理系统**: 任务创建、分配和验证
- **位置服务**: 地理围栏和定位功能
- **媒体处理**: 拍照验证和其他媒体功能

### 1.2 数据流
1. 用户与虚拟角色对话
2. LLM生成响应和任务
3. 用户接受任务并前往目标位置
4. 位置服务验证用户到达指定位置
5. 用户完成任务(学习、拍照等)
6. 系统验证任务完成并更新进度
7. LLM根据新状态推进故事

## 2. 数据模型设计

### 2.1 聊天数据模型
```java
@Entity(tableName = "chat_history")
public class ChatMessage {
    @PrimaryKey(autoGenerate = true)
    public int id;
    
    @ColumnInfo(name = "user_id")
    public String userId;
    
    @ColumnInfo(name = "role") // "system", "user", "assistant"
    public String role;
    
    @ColumnInfo(name = "content")
    public String content;
    
    @ColumnInfo(name = "timestamp")
    public long timestamp;
    
    @ColumnInfo(name = "related_task_id")
    public Integer relatedTaskId; // 可为null
    
    @ColumnInfo(name = "message_type")
    public String messageType; // "text", "task_card", "notification"
}
```

### 2.2 任务数据模型
```java
@Entity(tableName = "tasks")
public class TaskData {
    @PrimaryKey(autoGenerate = true)
    public int id;
    
    @ColumnInfo(name = "user_id")
    public String userId;
    
    @ColumnInfo(name = "title")
    public String title;
    
    @ColumnInfo(name = "description")
    public String description;
    
    @ColumnInfo(name = "location")
    public String location;
    
    @ColumnInfo(name = "latitude")
    public double latitude;
    
    @ColumnInfo(name = "longitude")
    public double longitude;
    
    @ColumnInfo(name = "radius")
    public float radius;
    
    @ColumnInfo(name = "is_completed")
    public boolean isCompleted;
    
    @ColumnInfo(name = "created_at")
    public long createdAt;
    
    @ColumnInfo(name = "completed_at")
    public Long completedAt;
    
    @ColumnInfo(name = "task_type")
    public String taskType; // "main", "sub", "daily"
    
    @ColumnInfo(name = "parent_task_id")
    public Integer parentTaskId; // 父任务ID，可为null
    
    @ColumnInfo(name = "character_id")
    public String characterId; // 关联的虚拟角色
    
    @ColumnInfo(name = "storyline_context")
    public String storylineContext; // 任务的故事背景
    
    @ColumnInfo(name = "verification_method")
    public String verificationMethod; // "geofence", "photo", "bluetooth", "time"
    
    @ColumnInfo(name = "estimated_duration")
    public int estimatedDuration; // 预计完成时间(分钟)
}
```

### 2.3 虚拟角色数据模型
```java
@Entity(tableName = "characters")
public class Character {
    @PrimaryKey
    public String id;
    
    @ColumnInfo(name = "name")
    public String name;
    
    @ColumnInfo(name = "background")
    public String background;
    
    @ColumnInfo(name = "personality")
    public String personality;
    
    @ColumnInfo(name = "avatar_resource")
    public String avatarResource;
    
    @ColumnInfo(name = "task_themes")
    public String taskThemes; // JSON数组存储
}
```

## 3. 任务层级关系

### 3.1 主线任务(Main Tasks)
- **特点**: 长期目标，构成整体故事线
- **持续时间**: 1-2周
- **示例**: 特工解密学校机密文件系统
- **组成**: 多个子任务的集合
- **生成方式**: LLM根据虚拟角色背景和用户偏好生成

### 3.2 子任务(Sub Tasks)
- **特点**: 主线任务的逻辑步骤
- **持续时间**: 1-3天
- **示例**: 获取计算机实验室访问权限
- **组成**: 多个每日任务的集合
- **生成方式**: LLM将主线任务分解为有序步骤

### 3.3 每日任务(Daily Tasks)
- **特点**: 当天可完成的具体行动
- **持续时间**: 30分钟-2小时
- **示例**: 前往图书馆找到特定书籍的密码
- **验证方式**: 地理围栏/拍照/时长
- **生成方式**: LLM根据用户当天时间和位置生成

## 4. 任务生成与管理

### 4.1 任务生成流程
1. **主线任务生成**
   - 用户选择虚拟角色后触发
   - LLM根据角色背景生成有趣的主线故事
   - 故事应融合学习元素并适应校园环境

2. **子任务分解**
   - 系统自动或用户请求时分解主线任务
   - LLM考虑任务逻辑顺序和用户日程
   - 每个子任务应有明确地点和目标

3. **每日任务生成**
   - 每天早上或用户请求时生成
   - 考虑用户当天课表和可用时间
   - 优先选择用户附近或必经地点

### 4.2 任务验证机制
1. **地理围栏验证**
   - 创建围绕目标位置的虚拟边界
   - 用户进入区域时触发验证事件
   - 可设置最小停留时间要求

2. **拍照验证**
   - 用户拍摄指定目标
   - 照片与任务关联保存
   - 可添加基础图像分析(可选)

3. **时长验证**
   - 记录用户在特定位置的停留时间
   - 达到要求时间后完成任务
   - 适用于学习类任务

4. **蓝牙验证**
   - 识别特定蓝牙信标
   - 用于精确室内位置验证
   - 增强用户互动体验

### 4.3 任务状态流转
1. **待接受**: 任务已生成但用户未接受
2. **进行中**: 用户已接受正在执行
3. **验证中**: 用户已提交验证等待确认
4. **已完成**: 任务验证通过
5. **已失败**: 任务超时或用户放弃
6. **已过期**: 时间窗口已过

## 5. LLM集成与上下文管理

### 5.1 上下文构建方法
1. **用户基本信息**
   - 用户ID
   - 当前虚拟角色
   - 用户偏好和兴趣

2. **任务状态摘要**
   - 当前活动任务
   - 最近完成的任务
   - 整体任务进度

3. **位置信息**
   - 当前位置
   - 最近访问的地点
   - 常去场所

4. **对话历史**
   - 最近10-20条消息
   - 关键对话标记
   - 对话主题摘要

### 5.2 提示词模板示例

#### 主线任务生成
```
你是一位创意故事任务设计者。请为以下虚拟角色创建一个与大学校园相关的主线任务：

角色背景：{特工背景信息}
用户偏好：{用户课表、常去地点、兴趣爱好}

创建一个有趣且持续性的主线任务，需满足：
1. 与角色背景相符
2. 有明确的总体目标
3. 可在大学校园内完成
4. 需要持续1-2周时间
5. 将学习目标巧妙融入任务中

输出格式：
{
  "title": "任务标题",
  "description": "任务描述",
  "background_story": "背景故事",
  "final_goal": "最终目标",
  "estimated_days": 数值,
  "learning_elements": ["元素1", "元素2"]
}
```

#### 子任务分解
```
你是一位任务规划专家。请将以下主线任务分解为合理的子任务：

主线任务：{主线任务详情}
用户课表：{用户每周课表}
常去地点：{用户经常去的校园地点}

将主线任务分解为4个子任务，每个子任务需要：
1. 在不同的校园地点进行
2. 有明确的完成标准
3. 包含1-2个学习或生活元素
4. 符合故事逻辑顺序

输出格式：
[
  {
    "sub_task_id": 1,
    "title": "子任务标题",
    "location": "具体校园地点",
    "description": "详细描述",
    "completion_criteria": "完成标准",
    "storyline_connection": "与主线故事的连接点"
  },
  ...
]
```

#### 每日任务生成
```
你是一位日程安排助手。请根据以下信息为用户生成今日任务：

当前进度：{已完成的任务和进行中的任务}
可用位置：{用户今天会去的地点}
可用时间：{用户今天的空闲时段}

生成2个适合今天完成的小任务，要求：
1. 每个任务耗时不超过30分钟
2. 与用户当天行程兼容
3. 推进整体故事进展
4. 明确指出具体地点和行动

输出格式：
[
  {
    "daily_task_id": 1,
    "parent_task_id": 对应的子任务ID,
    "title": "今日任务标题",
    "location": "具体位置",
    "time_window": "建议时间段",
    "duration_minutes": 分钟数,
    "action_required": "需要的具体行动",
    "verification_method": "完成验证方式"
  },
  ...
]
```

## 6. 详细实现步骤

### 6.1 数据库与数据模型准备
1. 创建Room数据库类
2. 实现各实体类(ChatMessage, TaskData, Character)
3. 定义DAO接口和方法
4. 编写数据库迁移脚本
5. 实现数据库初始化和预填充数据

### 6.2 LLM服务模块实现
1. 配置API连接参数
2. 实现异步HTTP请求客户端
3. 创建响应解析和处理方法
4. 实现错误处理和重试机制
5. 添加响应缓存功能

### 6.3 上下文管理实现
1. 创建用户上下文数据结构
2. 实现上下文构建和管理方法
3. 开发上下文压缩和摘要功能
4. 实现用户状态提取功能
5. 添加上下文持久化存储

### 6.4 任务生成系统实现
1. 创建各类任务提示词模板
2. 实现任务JSON响应解析
3. 开发主线-子任务-每日任务层级关系
4. 实现任务调度和推荐算法
5. 添加任务有效性验证

### 6.5 任务验证系统实现
1. 增强地理围栏管理器
2. 实现照片任务验证逻辑
3. 开发停留时间验证功能
4. 集成蓝牙信标验证
5. 实现验证结果处理

### 6.6 对话界面实现
1. 设计聊天界面布局
2. 创建消息适配器和ViewHolder
3. 实现任务卡片UI组件
4. 开发消息发送和接收功能
5. 添加历史消息加载功能

### 6.7 系统集成
1. 创建应用控制器协调各组件
2. 实现组件间通信接口
3. 开发全局事件总线
4. 添加应用生命周期管理
5. 实现异常处理和恢复机制

### 6.8 测试与优化
1. 编写单元测试
2. 实现UI测试
3. 进行用户场景测试
4. 优化性能和电池使用
5. 实施安全性和隐私保护

## 7. 技术挑战与解决方案

### 7.1 上下文管理挑战
- **问题**: LLM API不自动记录不同用户间的上下文
- **解决方案**: 
  1. 为每个用户维护独立上下文
  2. 在每次API调用中包含用户状态摘要
  3. 使用数据库存储对话历史
  4. 定期生成上下文摘要替代完整历史

### 7.2 任务验证挑战
- **问题**: 准确验证用户完成任务
- **解决方案**:
  1. 组合多种验证方式
  2. 根据任务类型选择合适验证方法
  3. 使用时间和位置数据交叉验证
  4. 引入可信度评分机制

### 7.3 故事连贯性挑战
- **问题**: 维持长期故事线的连贯性
- **解决方案**:
  1. 存储关键剧情点和分支
  2. 使用LLM生成剧情摘要
  3. 在提示词中包含故事进展
  4. 定期评估和调整故事方向

### 7.4 位置服务优化挑战
- **问题**: 减少电池消耗同时保持准确性
- **解决方案**:
  1. 动态调整定位频率
  2. 使用活动识别API优化
  3. 根据任务紧急度调整精度
  4. 实现地理围栏智能调度

## 8. 未来拓展方向

### 8.1 多用户协作任务
- 支持多名用户共同完成任务
- 实现角色分工和协作机制
- 添加实时进度共享功能

### 8.2 AR增强体验
- 集成AR技术展示虚拟角色
- 使用AR导航引导用户
- 添加任务目标AR识别

### 8.3 学习分析功能
- 跟踪学习任务完成情况
- 生成学习效率分析报告
- 提供个性化学习建议

### 8.4 情感适应系统
- 分析用户情绪状态
- 根据情绪调整任务难度
- 提供情感支持对话


————特工任务生成prompt参考：  
背景故事：

你是一名被临时招募的"校园特工"，代号"暗影"。
你的任务是协助虚拟特工"Zero"阻止一个名为"灰域"的组织在校园内散布虚假信息。
Zero通过加密消息与你联系，而你的每个校园任务实际上都是在收集线索、解密情报，最终阻止阴谋

任务阶段设计
阶段1：新手任务 - 初入特工世界
剧情触发：

你收到一条神秘短信："暗影，你的第一个任务：前往图书馆B区，找到藏有密钥的书籍。注意，灰域的探子可能在附近。"

（系统自动触发任务，推送至用户手机）

任务目标：

任务1：前往图书馆B区（对应现实中的教学楼），在书架间找到一本封面带二维码的书籍（现实中的指定书籍或海报）。
任务2：扫描二维码，上传照片打卡（验证位置+拍照动作）。
任务3：在图书馆自习30分钟（触发地理围栏计时，模拟"解密"过程）。
剧情反馈：

Zero发送消息："密钥已激活！灰域的通讯频道被干扰了。下一个目标：获取实验室的生物样本（一瓶矿泉水）。"
用户获得"新手特工"称号和积分奖励。
阶段2：进阶任务 - 深入调查
剧情触发：

Zero发送加密邮件："灰域计划在明天的学术论坛上植入虚假数据。我们需要你潜入实验室，获取他们的'样本'。"

任务目标：

任务1：前往实验室（现实中的实验室或指定地点），拍摄实验器材（如显微镜）的照片。
任务2：在实验室附近便利店购买一瓶矿泉水（模拟"生物样本"，需上传购物小票或瓶身照片）。
任务3：在食堂与一名陌生人交换"情报"（随机匹配同学，双方需互相扫描对方生成的二维码）。
剧情反馈：

Zero消息："样本已分析！灰域的计划与校园网有关。下一步：在体育馆的储物柜中找到加密U盘。"
用户解锁"调查专家"成就，获得可兑换奖励的虚拟货币。
阶段3：终极任务 - 阻止阴谋
剧情触发：

Zero紧急通知："灰域将在今晚的校园灯光秀中启动信号干扰器！你必须在活动开始前找到并摧毁它。"

任务目标：

任务1：前往灯光秀场地（体育馆或广场），拍摄现场布置照片。
任务2：在人群中最先找到并扫描隐藏的二维码（贴在某个显眼但需寻找的位置）。
任务3：在限定时间内完成"干扰器破解小游戏"（系统弹出AR小游戏，需快速点击消除干扰信号）。
剧情结局：

若成功：Zero发送祝贺："阴谋已挫败！感谢你的贡献，暗影。你的行动保护了校园的真相。"
若失败：Zero发送鼓励："这次失败只是计划的一部分，灰域的下一个目标是...（开启新剧情线）"
任务系统与剧情联动的技术实现
动态任务生成：

使用AI根据用户历史行为生成个性化任务（如常去图书馆的用户更多学术类任务，常去食堂的用户更多社交类任务）。
任务描述需结合剧情，例如将"去食堂吃饭"包装为"潜入敌方补给站获取情报"。
位置验证与剧情推进：

地理围栏技术确保用户到达指定地点（如教学楼）后触发下一步剧情。
拍照打卡需AI识别照片内容（如特定书籍封面、实验器材）以验证任务完成。
虚拟角色交互：

Zero的对话通过预设剧本+AI生成结合，根据用户进度调整语气和提示（如用户多次失败时，Zero会发送鼓励信息）。
可加入分支剧情：用户选择不同任务路线（如选择"潜入"或"社交"方式），影响后续剧情。
奖励与成就系统：

完成任务获得虚拟货币，可兑换现实奖励（如校园周边礼品）或解锁剧情CG图。
设置隐藏成就（如"完美特工"：所有任务零失误）。—————— 以上废弃



可行性分析
您提出的动态剧情分支系统设计非常具有吸引力，通过只依靠拍照识别和地理围栏两种基础验证方式，完全可以构建丰富多样的分支剧情体验。我们已实现的任务生成与管理系统完全能够支持这种设计。
两种验证机制的最大化利用
地理围栏验证的创造性应用
定位探索:
学术线：图书馆特定书架、实验室特定位置、教授办公室
社交线：食堂特定区域、社团活动室、派对场地
体能线：体育馆、校园夜跑路线、校园特定禁区附近
停留时间任务:
学术线：在图书馆停留30分钟"解密"、在实验室停留"分析样本"
社交线：在食堂停留"与线人接头"、在社团活动室停留"潜入会议"
体能线：在体育场跑步持续15分钟"跟踪信使"
位置序列验证:
要求用户按特定顺序到达多个地点："先到图书馆获取线索，然后前往实验室验证"
拍照识别的多样化运用
目标识别:
学术线：拍摄特定书籍封面、实验器材、电脑屏幕
社交线：拍摄食堂菜单、社团海报、特定聚会场景
体能线：拍摄体育器材、储物柜、校园特定建筑
二维码整合:
在校园各处放置特定二维码，用户必须找到并扫描
二维码可以包含下一任务线索或"解密"后的情报
简单物品识别:
矿泉水瓶（"样本"）拍照
校园标志性物品拍照
指定颜色物品拍照（如"红色U盘"）
系统实现方案
基于我们已经实现的任务生成与管理系统，您的设计完全可行。以下是具体实现方案：
1. 提示词模板扩展
在PromptBuilder类中添加针对分支剧情的提示词模板：
2. 任务分支逻辑实现
在TaskGenerator中添加分支选择逻辑：
3. 故事线管理扩展
在StorylineManager中添加分支追踪：
4. 验证功能增强
在TaskScheduler中增强地理围栏和拍照验证：
示例主线-分支任务设计
1. 固定起点：图书馆密钥任务（所有玩家）
任务描述：在图书馆特定区域寻找带有二维码的书籍
验证方式：地理围栏+拍照（先到图书馆指定位置，然后拍摄二维码）
剧情推进：Zero发送针对不同分支的下一步任务
2. 分支特色任务（根据用户画像）
学术解密线：实验室样本分析
任务描述：前往实验室获取"样本"（矿泉水瓶）并拍照
验证方式：地理围栏+拍照（要求在实验室停留10分钟，然后拍摄矿泉水瓶）
剧情特色："样本中含有灰域组织的痕迹，请立即分析..."
社交情报线：食堂线人接头
任务描述：在食堂特定位置与"线人"（任意一位同学）交换情报
验证方式：地理围栏+拍照（要求在食堂停留，拍摄一张与他人共餐的照片）
剧情特色："线人告诉你，灰域成员将在社团活动中窃取信息..."
体能潜入线：体育馆追踪
任务描述：在体育馆寻找特定储物柜并记录编号
验证方式：地理围栏+拍照（要求到达体育馆特定位置，拍摄储物柜编号）
剧情特色："储物柜中藏有灰域的秘密通讯装置..."
3. 固定结局：灯光秀阻止任务（所有玩家）
任务描述：前往校园灯光秀现场阻止灰域启动干扰器
验证方式：地理围栏+拍照（到达指定位置，拍摄场地照片）
剧情差异：
学术线：需拍摄某电脑/设备照片（"破解系统"）
社交线：需拍摄与另一名玩家合影（"说服关键人物"）
体能线：需在特定位置停留3分钟（"物理销毁干扰器"）
结论
您的动态剧情分支系统设计完全可行，而且能够与我们实现的任务生成与管理系统无缝集成。仅依靠地理围栏和拍照这两种基础验证方式，就能构建出丰富多样的分支剧情体验。
系统关键优势:
简单但有效的验证机制：不需要复杂技术，只用地理围栏和基础拍照
个性化体验：根据用户行为自动推荐最适合的分支
统一的故事框架：固定起点和结局确保叙事完整性
可扩展性：容易添加新的分支和任务
建议您从一条分支开始实现（如学术线），测试成功后再逐步添加其他分支。我们的系统框架已经具备支持这种动态剧情分支的全部能力。

任务验证机制：
拍照：在语言LLM发布任务后，应当再生成一个和他有关的拍照验证的prompt，附带在拍照验证的LLM请求中，
拍照验证的LLM应当输出与拍照验证prompt相关性的分数，分数范围为0-100，0表示完全不相关，100表示完全相关。
当分数低于50时，应当提示用户重新拍照。高于50时，应当提示用户拍照成功。

例如此时系统发布任务："请拍摄一张图书馆的图片"，拍照验证的LLM应当输出与图书馆相关的图片分数，
如果用户拍摄的是其他图片，则分数会很低，此时应当提示用户重新拍照。
如果用户拍摄的是图书馆的图片，则分数会很高，此时应当提示用户拍照成功。

流程：
1. 语言LLM发布任务
2. 拍照验证LLM生成拍照验证prompt
3. 拍照验证LLM输出分数
4. 根据分数提示用户重新拍照或拍照成功

拍照任务验证：与在crucialmap的打卡不同的是，拍照任务验证是直接在activityselection中进行验证的，
大致的流程：当任务在activityselection中发布后，此时会有一个接受任务的按钮（这个UI卡片和LLM的text发布任务的卡片是一样的），
随后用户点击接受任务，此时语言LLM会生成和任务相关的拍照验证的prompt，并附带在拍照验证的LLM请求中，因为在crucialmap中，
实时记录了用户的经纬度位置，所以假如语言LLM任务生成的拍照图片任务带有位置要求，则应当在拍照验证前验证用户是否在要求位置，因为在Geofence里已经记录了用户的位置，
我设置了每个教学楼的地理位置，所以检测的时候可以按照他来进行判断。如果用户在要求位置，则拍照按钮可以按下，假如用户不在要求位置，则弹出提示框，提示用户需要前往要求位置。。
然后此时用户拍照或是上传照片，此时拍照验证的LLM会根据拍照验证的prompt和用户上传的照片进行打分，
如果分数低于50，则提示用户重新拍照，如果分数高于50，则提示用户拍照成功。
这就是拍照任务验证的流程。

拍照的任务带positionID：如果是0则表示拍照任务没有位置要求，如果是数字1则表示拍照任务有位置要求
在有拍照任务的时候，crucialmap的打卡处根据从activityselection 里传出的id = 1，将原来按下打卡后变成计时器的功能变为拍照验证，然后此时
发送照片给拍照验证的LLM，但注意的是此时在activityselection中，也会有这个拍照的照片消息记录。
在不带有位置的拍照任务中，只用在activityselection中显示拍照按钮，然后用户拍照后，发送照片给拍照验证的LLM，。
如何决定到底要不要地理验证呢？先随机来定
当LLM发布任务后：
    1. 在ActivitySelection中显示任务卡片
    2. 用户点击"接受任务"按钮
    3. 更新任务状态为"accepted"
    4. 检查任务是否需要照片验证
        如果需要照片验证：
            调用TaskVerificationPromptGenerator生成验证prompt
            将验证prompt存储到TaskVerificationData中

当用户尝试完成需要照片验证的任务时：
    1. LocationVerifier检查用户当前位置
    2. 从任务数据中获取所需位置信息
    3. 比较用户位置与任务要求位置
        如果不在要求位置：
            显示提示信息："请前往[任务位置]再进行拍照验证"
            返回
        如果在正确位置：
            继续照片验证流程

照片验证流程：
    1. 显示拍照/选择图片选项
    2. 用户选择操作方式：
        如果选择拍照：
            调用相机应用拍摄照片
        如果选择从图库选择：
            打开图库让用户选择照片
    3. PhotoCaptureManager处理照片获取结果
    4. 优化照片尺寸和质量以适合LLM分析
    5. 准备验证数据包（包含照片和验证prompt）


    照片验证：
    1. 准备验证请求：
        - 照片数据
        - 验证prompt
        - 任务ID和相关元数据
    2. ImageVerificationLLMClient发送验证请求到LLM服务
    3. 显示等待提示（"正在验证照片..."）
    4. 接收LLM验证结果（相关性分数0-100）
    5. 根据分数判断验证结果：
        如果分数 < 50：
            显示失败信息："照片与任务不符，请重新拍摄"
            提供重试选项
        如果分数 >= 50：
            显示成功信息："照片验证成功！"
            调用TaskVerificationResultHandler处理成功结果


            验证成功处理：
    1. 将照片URL存储到任务验证数据中
    2. 更新任务状态（可能为"completed"或特定状态）
    3. 通知用户验证成功
    4. 添加系统消息到聊天："已完成[任务名称]的照片验证"
    5. 触发可能的奖励或后续任务


  Zero的调用是经过prompt限制过的语言LLM模型（实际上就是我们实现的TextLLM模型加了一些prompt限制），
  当Zero发布任务后，是该textLLm语言发布任务，发布的任务取决于故事线，任务的类型分为，是去前往目的地点进行时间打卡，
  另外的是进行拍照的任务（拍照的任务也分为到达指定地理围栏内拍照，和不要求地理位置的拍照）

  拍照的流程是，
  当Zero发布拍照任务后，此时在ActivitySelection中会显示拍照按钮，然后用户点击拍照按钮后，此时会调用相机应用，
  然后用户拍摄照片后，此时照片会存储到本地，然后此时会调用拍照验证的LLM，此时拍照验证的LLM会根据拍照验证的prompt和用户上传的照片进行打分，
  如果分数低于50，则提示用户重新拍照，如果分数高于50，则提示用户拍照成功。
  
  那也就是说一共需要两个LLM模型，一个Zero的LLM模型，一个拍照验证的LLM模型。

  前往目的地进行时间打卡：在目前所有存入的教学楼的信息中选取一个教学楼发布打卡。

现状分析
目前系统状态：
任务类型划分：
代码中任务验证方式有三种：geofence（地理围栏）、photo（拍照）、time（时长）
但没有明确区分你所需的"关键行动任务"和"支援任务"两种类型
任务验证方式设置：
在TaskGenerator.java的parseAgentTaskResponse方法中，所有特工任务都设置了positionID = 1，表示需要位置验证
任务验证方法verificationMethod是从LLM响应中获取，没有根据任务类型自动设置
地理围栏实现：
GeoFenceManager和CrucialMapViewImplement有完整的地理围栏支持
当用户进入围栏会触发onUserEnterFence，可以启动任务验证
代码结构：
当前任务系统没有按照你需求中的"关键行动任务"和"支援任务"区分任务类型
所有"特工Zero"任务都使用相同的生成逻辑，没有根据故事线或任务类型设置不同的验证规则
需要改进的地方
要实现你的需求规范，需要进行以下改进：
任务类型区分：
需要在TaskData类中添加新字段，区分"关键行动任务"和"支援任务"
例如添加agentTaskType字段，可以是"crucial_action"或"support"
验证方式智能分配：
修改TaskGenerator.java中的parseAgentTaskResponse方法
根据任务类型自动设置不同的验证方式：
关键行动任务→设置为time验证 + geofence验证
支援任务→设置为photo验证，无地理位置要求
LLM提示词改进：
修改PromptBuilder中的buildAgentTaskPrompt，明确要求LLM生成两种类型的任务
在提示词中指定不同类型任务的验证方式和条件
任务执行流程优化：
修改CrucialMapViewImplement，为关键行动任务添加倒计时功能
调整ActivitySelection中的任务执行逻辑，根据任务类型显示不同的验证界面


任务系统优化需求规范
目标
重构特工ZERO的任务生成逻辑，使其符合故事线发展目标，并严格区分两类任务类型：

任务类型与权重规则
任务类别划分

类型A（关键行动任务）：
触发条件：涉及案件调查、耗时任务或情报解密
执行规则：
必须前往指定地点（如教学楼）完成定时打卡和拍照验证
拍照后启动计时器，需停留至规定时间
举例："前往CB楼调查机密文件" → 抵达后拍照 → 倒计时30分钟 → 完成
类型B（支援任务）：
触发条件：涉及资源收集、装备获取或快速支援
执行规则：
可任意地点拍照验证（无需定位）
提交照片后立即完成
举例："拍摄实验样本" → 任意地点拍摄符合要求的照片 → 验证后通过
权重调整规则

关键行动任务占比应提升至总任务的60%~70%
支援任务仅在以下情况触发：
剧情推进至物资紧缺阶段
用户48小时内未完成关键行动任务
用户流程设计
关键行动任务执行路径
任务接收：

ZERO颁布任务："立即前往CB楼破译加密档案"
任务列表出现"查看任务"按钮
地理验证与启动：

点击"查看任务"跳转至CrucialMap界面
页面自动定位至目标建筑物（如CB楼），界面显示悬浮任务标记
点击悬浮窗触发地理围栏检查：仅当用户实际位于目标区域（GPS误差≤100米），允许点击"开始任务"
交互流程：

点击"开始任务"后自动返回对话界面
显示新卡片："开始打卡"
步骤验证：
点击"开始打卡"进入照片选择界面（图库上传/即时拍摄）
照片验证通过后，复用原有计时器组件在对话窗口显示倒计时
强制完成条件：倒计时结束前不得离开地理围栏范围
完成任务：

倒计时结束自动标记成功
触发ZERO反馈："加密档案已破译，你找到了关键证据！"
技术约束条件
功能复用规则：

必须复用已实现的计时器UI，仅调整其显示位置至对话框内
地理围栏验证模块直接调用现有CrucialMap接口
状态同步要求：

地理围栏验证结果与任务状态实时同步数据库
计时器中断时（用户提前离开），系统自动冻结进度
异常处理：

用户位置偏移时：连续3次检测失败则强制终止任务
网络中断时：允许离线计时，恢复后同步数据
视觉与交互标准
地图标记规范：

关键任务建筑物采用红色脉冲图标
非关键任务使用常规蓝色标记
计时器显示：

在对话框内以动态进度条+数字显示
每5分钟同步一次剩余时间至任务列表
