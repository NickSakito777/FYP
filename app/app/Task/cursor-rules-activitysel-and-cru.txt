# Rules for Interaction between ActivitySelection and CrucialMapViewImplement

## Rule 1: Starting the Task Selection Flow
- WHEN: User clicks the 'Task List' button (e.g., `checkInButton`) in `CrucialMapViewImplement`.
- ACTION: `CrucialMapViewImplement` starts `ActivitySelection` using `startActivityForResult`.
- EXPECTATION: `ActivitySelection` will return data about a selected task.

## Rule 2: Sending Task Data to Map
- WHEN: User accepts or selects a task in `ActivitySelection`.
- ACTION: `ActivitySelection` prepares an `Intent` containing task details (ID, type, location, description, verification method, marker content, etc.).
- MECHANISM:
    - `ActivitySelection.navigateToMapWithLocation`: Uses `setResult(RESULT_OK, intent)` and `finish()`.
    - `ActivitySelection.showTaskLocationOnMap`: Uses `startActivity(intent)`.
- DATA PASSED: Task ID, Task Type (daily/agent), Location (index or lat/lon), Title, Description, Marker Content, Verification Info.

## Rule 3: Map Receiving and Displaying Task
- WHEN: `CrucialMapViewImplement.onActivityResult` receives a `RESULT_OK` from `ActivitySelection` (requestCode 0).
- ACTION:
    - Parse the task details from the received `Intent`.
    - Store the `currentTaskType`.
    - Clear previous markers (`mBaiduMap.clear()`).
    - Add a new `Marker` to the map at the task location using `addMarker`, differentiating icon based on `task_type`.
    - Populate the marker's `extraInfo` with task details.
    - Move the map camera to the marker location using `moveCamera`.
- MARKER INTERACTION: Clicking the marker calls `showPopupLayer` displaying task info and buttons (Navigate, Check-in/Timer, Close).

## Rule 4: Handling Task Actions on Map
- NAVIGATION: Clicking 'Navigate' in the popup calls `walkNavigate` to start Baidu walk navigation.
- CHECK-IN / TIMER START:
    - Clicking 'Check-in'/'Timer' calls `onCheckInButtonClicked` or starts the timer (`showTimerView` -> `startTimer`).
    - **If `task_type` is 'agent'**: May require timer completion *before* triggering photo verification via `onCheckInButtonClicked`.
    - **If `task_type` is 'daily'**: May directly trigger photo verification via `onCheckInButtonClicked`.
    - Timer logic (`startTimer`, `pauseTimer`, `resumeTimer`) is managed within `CrucialMapViewImplement`, potentially interacting with `GeoFenceManager` for pauses.
- PHOTO VERIFICATION TRIGGER: `onCheckInButtonClicked` (potentially after timer completion) calls `startPhotoActivity`, passing `markerId` and using `startActivityForResult` (requestCode `REQUEST_TASK_TIMER`).

## Rule 5: Signaling Task Completion from Map to Selection
- WHEN: A task step requiring update in `ActivitySelection` is completed in `CrucialMapViewImplement` (e.g., `finishTimer`).
- ACTION: `CrucialMapViewImplement` prepares an `Intent` targeting `ActivitySelection`.
- DATA PASSED: `task_completed = true`, `task_id`.
- MECHANISM: `startActivity(intent)` with `FLAG_ACTIVITY_REORDER_TO_FRONT`.

## Rule 6: Handling Task Completion Signal in Selection
- WHEN: `ActivitySelection.onActivityResult` receives the completion signal `Intent` (e.g., from `CrucialMapViewImplement` or `PhotoActivity`).
- ACTION:
    - Check for `task_completed = true`.
    - Extract `task_id`.
    - Call database update methods (e.g., `markAgentTaskAsCompleted`) to mark the task as done.
    - Display completion messages in the chat UI (`chatAdapter.addMessage`, `saveChatMessageToDatabase`).

    # Rules for ActivitySelection.java Interactions

## Rule 7: Database Interactions (Tasks)
- WHEN: Loading tasks, accepting/rejecting tasks, marking tasks complete.
- ACTION: `ActivitySelection` interacts with the database via `AppDatabase` instance.
- COMPONENT: `AppDatabase`, `TaskDao`, `TaskData`.
- MECHANISM: Calls methods like `taskDao().getTasksForDate()`, `taskDao().getTaskById()`, `taskDao().updateTask()`, `taskDao().insertTask()`.
- DATA: Uses `TaskData` objects to represent task information.

## Rule 8: Database Interactions (Chat)
- WHEN: Loading chat history, saving new messages (user, AI, system, task cards).
- ACTION: `ActivitySelection` interacts with the database via `AppDatabase` instance.
- COMPONENT: `AppDatabase`, `ChatMessageDao`, `ChatMessage`.
- MECHANISM: Calls methods like `chatMessageDao().getRecentMessagesByUserId()`, `chatMessageDao().insert()`.
- DATA: Uses `ChatMessage` objects to represent message data.

## Rule 9: Database Interactions (Task Verification)
- WHEN: Handling tasks requiring photo or time verification.
- ACTION: `ActivitySelection` creates/updates verification records in the database.
- COMPONENT: `AppDatabase`, `TaskVerificationDao`, `TaskVerificationData`.
- MECHANISM: Calls methods like `taskVerificationDao().getVerificationForTask()`, `taskVerificationDao().insertVerification()`, `taskVerificationDao().updateVerification()`.
- DATA: Uses `TaskVerificationData` objects.

## Rule 10: Database Interactions (Character - Agent Zero)
- WHEN: Initializing agent tasks or ensuring the agent character exists.
- ACTION: Checks for and potentially creates the "Agent Zero" character record.
- COMPONENT: `AppDatabase`, `CharacterDao`, `Character`.
- MECHANISM: Calls `characterDao().getCharacterById()`, `characterDao().insertCharacter()`.
- DATA: Uses `Character` object, `characterId = "agent_zero"`.

## Rule 11: Task Generation Service Interaction
- WHEN: User clicks the 'Generate Task' button (after cooldown).
- ACTION: `ActivitySelection` starts the `TaskGenerationService` using an `Intent`.
- COMPONENT: `TaskGenerationService`.
- MECHANISM: `startService(serviceIntent)`.
- FEEDBACK: Receives results (success/failure) via `BroadcastReceiver` (`taskReceiver`) listening for `TaskGenerationService.ACTION_TASK_GENERATED`. Updates UI and task list accordingly.

## Rule 12: LLM Interactions (Text Chat & Task Suggestion)
- WHEN: User sends a text message in the chat.
- ACTION: `ActivitySelection` sends the message to the LLM and processes the response.
- COMPONENT: `LLMManager`.
- MECHANISM: Calls `llmManager.sendMessage()`, providing user ID, message, and a callback.
- PROCESSING: Parses response for potential task suggestions (`parseLLMResponseForTaskSuggestion`) and removes JSON (`removeJsonFromResponse`) before displaying text and potentially saving the suggested task (`saveTaskToDatabase`).

## Rule 13: LLM Interactions (Image Processing)
- WHEN: User selects an image from the gallery or camera for general chat.
- ACTION: `ActivitySelection` sends the image URI to the image LLM for analysis.
- COMPONENT: `ImageLLMManager`.
- MECHANISM: Calls `imageLLM.processImage()`, providing image URI, prompt, and a callback. Displays the response in chat.

## Rule 14: LLM Interactions (Photo Verification)
- WHEN: A task requires photo verification and the user provides an image.
- ACTION: `ActivitySelection` sends the image URI and verification prompt to the image LLM for validation against the task.
- COMPONENT: `ImageLLMManager`.
- MECHANISM: Calls `imageLLM.verifyTaskImage()`, providing image URI, prompt, task title, and a callback. Handles success (`showVerificationSuccess`) or failure (`showVerificationFailure`) based on the score.

## Rule 15: LLM Interactions (Text Generation - Test Task)
- WHEN: User triggers the creation of a test photo verification task (e.g., via menu).
- ACTION: `ActivitySelection` requests task text (title, description, prompt) from the text LLM.
- COMPONENT: `TextLLMManager`.
- MECHANISM: Calls `textLLMManager.generatePhotoVerificationTaskText()` with a callback. Creates and saves the `TaskData` upon success.

## Rule 16: Agent Task Generation
- WHEN: Starting the agent mission or moving to the next stage.
- ACTION: `ActivitySelection` requests a new agent task for the current stage.
- COMPONENT: `TaskGenerator`.
- MECHANISM: Calls `taskGenerator.generateAgentTask()`, providing user ID, character ID, and stage. Loads and displays the task upon success (`loadAndDisplayAgentTask`).

## Rule 17: UI Binding (Chat)
- WHEN: Displaying chat history or new messages.
- ACTION: `ActivitySelection` uses `ChatMessageAdapter` to bind `ChatMessage` data to the `RecyclerView`.
- COMPONENT: `ChatMessageAdapter`, `RecyclerView`, `ChatMessage`.
- MECHANISM: `chatAdapter.addMessage()`, `chatAdapter.clearMessages()`, `chatRecyclerView.setAdapter()`, `chatRecyclerView.scrollToPosition()`. Handles clicks on task cards within the chat via listener interfaces.

## Rule 18: UI Binding (Task List - Page 1)
- WHEN: Displaying the list of daily tasks.
- ACTION: `ActivitySelection` dynamically adds task views (`task_item_view`) or an empty view (`empty_task_view`) to the `activityList` layout.
- COMPONENT: `LayoutInflater`, `R.layout.task_item_view`, `R.layout.empty_task_view`.
- MECHANISM: Inflates layouts, sets text/button states based on `TaskData`, adds views to the `ViewGroup`.

## Rule 19: UI Management (Sidebar & Content Switching)
- WHEN: User clicks sidebar buttons (`sidebarBtn1`, `sidebarBtn2`, `sidebarBtn3`).
- ACTION: `ActivitySelection` switches the visibility of content containers (`contentTasks`, `contentPage2`, `contentPage3`) and updates button backgrounds.
- COMPONENT: `Button`, `View` (representing content areas).
- MECHANISM: `setVisibility()`, `setBackground()`. Loads agent task content specifically when switching to page 3 (`loadAgentTaskContent`).

## Rule 20: System Component Interaction (SharedPreferences)
- WHEN: Storing/retrieving simple user/app state.
- ACTION: `ActivitySelection` reads from and writes to `SharedPreferences`.
- COMPONENT: `SharedPreferences`.
- MECHANISM: `getSharedPreferences()`, `prefs.getString()`, `prefs.getBoolean()`, `prefs.getLong()`, `editor.putBoolean()`, `editor.putLong()`, `editor.apply()`.
- KEYS USED: `user_prefs` (user_id), `button_state` (generate button disabled state/time), `camera_prefs`, `agent_prefs` (mission started), `location_prefs` (current_cum_id).

## Rule 21: System Component Interaction (BroadcastReceiver - GeoFence/Location)
- WHEN: Receiving updates about entering/leaving GeoFences or location changes.
- ACTION: `ActivitySelection` uses `geoFenceReceiver` and `locationReceiver` to listen for broadcasts.
- COMPONENT: `BroadcastReceiver`, `GeoFenceManager.GEOFENCE_BROADCAST_ACTION`.
- MECHANISM: `registerReceiver()`, `unregisterReceiver()`. Updates `current_cum_id` in `location_prefs` based on fence status.

## Rule 22: System Component Interaction (Handler & Timer)
- WHEN: Performing delayed actions, UI updates from background threads, animations, countdowns.
- ACTION: `ActivitySelection` uses `Handler` and `CountDownTimer`.
- COMPONENT: `Handler`, `Runnable`, `CountDownTimer`.
- MECHANISM: `handler.postDelayed()`, `runOnUiThread()`, `handler.post()` (for dot animation), `CountDownTimer.start()`, `onTick`, `onFinish`. Used for generate button cooldown and task timers.

## Rule 23: Map Interaction (Float Window)
- WHEN: Activity lifecycle events (`onCreate`, `onDestroy`, `onPause`, `onResume`).
- ACTION: `ActivitySelection` controls the visibility of a map-related floating window.
- COMPONENT: `FloatWindowManager`.
- MECHANISM: `FloatWindowManager.get().hideToolView()`, `FloatWindowManager.get().visibleToolView()`.

## Rule 24: Starting Other Activities
- WHEN: Navigating to Agent Task details, handling specific menu items.
- ACTION: `ActivitySelection` starts other activities using Intents.
- COMPONENT: `Intent`, `AgentTaskActivity`.
- MECHANISM: `startActivity(intent)`. (Note: Interaction with `CrucialMapViewImplement` is covered by Rules 2 & 5).

## Rule 25: Handling Activity Results
- WHEN: Returning from activities started with `startActivityForResult` (e.g., Camera, Gallery, `CrucialMapViewImplement`).
- ACTION: `ActivitySelection.onActivityResult` processes the returned data.
- MECHANISM: Handles different `requestCode` values (e.g., `REQUEST_IMAGE_CAPTURE`, `REQUEST_PICK_IMAGE`, `REQUEST_VERIFICATION_IMAGE_CAPTURE`, results from `CrucialMapViewImplement`) to process images, trigger verification (`verifyPhotoWithLLM`), or handle task completion signals (Rule 6).